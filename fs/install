#!/bin/bash
set -e
dmesg --console-off # make kernel shut up

CADMIUMROOT="/CdFiles"

. $CADMIUMROOT/config
. $CADMIUMROOT/fs/$ROOTFS/info

# try finding out bootloader
BOOTFW=unknown
if cat /proc/cmdline | grep -s cros_secure >/dev/null 2>&1; then
	BOOTFW=depthcharge
	BOOTFW_PKGS="$FS_PKGS_CD_BOOTFW_DEPTHCHARGE"
elif [ -d "/sys/firmware/efi" ]; then
	BOOTFW=efi
	BOOTFW_PKGS="$FS_PKGS_CD_BOOTFW_EFI"
fi

if [ "$BOOTFW" = "unknown" ]; then
	echo "Seems the automatic bootloader detection failed"
	echo "Bailing out, you're on your own"
	exit 1
fi

echo "Welcome to Cadmium installer"
echo "Choose your fate:"
echo "1: Installation to internal memory"
if [ "$BOOTFW" != "depthcharge" ]; then
	echo "2: Installation to internal memory, with dual-boot setup"
fi
echo "3: Installation to this medium"
echo "4: Drop to shell"

opt=inv
until [ "$opt" != "inv" ]; do
	read -p ": " opt
done

case $opt in
	1) INSTMED="emmc" ;; # install medium
	2) INSTMED="dualboot" ;;
	3) INSTMED="this" ;;
	4) exit 0 ;;
esac

# try finding current device in cadmium tree

TARGET=none
COMPATIBLE="$(cat /sys/firmware/devicetree/base/compatible)"
for x in $(find $CADMIUMROOT/board/* -type d -printf '%f\n'); do
	try=$(echo $COMPATIBLE | grep $x) || true
	if [ -n "$try" ]; then
		echo "Found device from compatible string: $x"
		TARGET="$x"
	fi
done

if [ $TARGET = none ]; then
	echo "Failed to autodetect device, bailing out"
	exit 1
fi

if [ -e "$CADMIUMROOT/board/$TARGET/boardinfo" ]; then
	. $CADMIUMROOT/board/$TARGET/boardinfo
fi
. $CADMIUMROOT/baseboard/$BASEBOARD/boardinfo
#echo "$SOC $BOARD $BASEBOARD"

# don't even try installing if the device is about to die
for x in /sys/class/power_supply/*; do
	echo "Trying path: $x"
	if [ "$(cat $x/device/name)" = 'sbs-battery' -o "$(cat $x/device/name)" = 'bq27500' ]; then
		echo "Found battery at $x"
		BAT=$x
	fi
done

if [ "$BASEBOARD" = "x1e80100-woa" ]; then
	echo "WARNING: THIS DEVICE DOESN'T HAVE WORKING BATTERY READOUT ON USB BOOT"
	echo "IF IT DISCHARGES DURING INSTALLATION DON'T BLAME ME"
elif [ "$BAT" = "NOTFOUND" ]; then
	. /CdFiles/info
	echo "Debug info: R: $ROOTFS B: $BASEBOARD T: $BOARD"
	echo "Uh oh, automatic battery detection failed"
	echo "Make a photo of this screen and include it in issue on Cadmium Github page"
else
	BATCAPACITY="$(cat $BAT/capacity)"

	if [ "$BATCAPACITY" -le 30 ]; then
		echo "Looks like your device is about to discharge, currently it sits at $BATCAPACITY %"
		echo "Bailing out for safety reasons"
		exit 1
	fi
fi

nmcli device wifi rescan
sleep 4 # wait for wifi networks
nmtui connect

which ntpdate >/dev/null 2>&1 && ntpdate pool.ntp.org

$FS_INST_PKG $BOOTFW_PKGS

# try finding emmc
case "$BASEBOARD" in
	x1e80100-woa)
		INTDEV="/dev/nvme0n1"
		;;
	*)
		INTDEV="$(ls /dev/mmcblk* | grep -F boot0 | sed 's/boot0//')"
		;;
esac

export chroot="chroot"

# gonna be using that device
if [ -n "$(cat /proc/self/mounts | grep /boot)" ]; then
	umount /boot/
fi

export DESTDIR=/
if [ $INSTMED != this ]; then
	# setup partitions
	case $BOOTFW in
		depthcharge)
			dd if=/dev/zero of=$INTDEV bs=512k count=128 seek=$EMMC_OFFSET
			parted --script $INTDEV mklabel gpt >/dev/null 2>&1 || true # ???
			cgpt create $INTDEV
			cgpt add -i 1 -t kernel -b $(expr 8192 + $EMMC_OFFSET)   -s 65536 -l IntKernelA -S 1 -T 2 -P 10  ${INTDEV}
			cgpt add -i 2 -t kernel -b $(expr 73728 + $EMMC_OFFSET)  -s 65536 -l IntKernelB -S 0 -T 2 -P 5   ${INTDEV}
			cgpt add -i 3 -t data   -b $(expr 139264 + $EMMC_OFFSET) -s $(expr $(cgpt show ${INTDEV} | grep 'Sec GPT table' | awk '{print $1}') - $(expr 139264 + $EMMC_OFFSET)) -l IntRoot ${INTDEV}

			ROOTPART=/dev/disk/by-partlabel/IntRoot
			KERNPART=/dev/disk/by-partlabel/IntKernelA

			dd if=/dev/disk/by-partlabel/ExtKernelA of=$KERNPART
			;;
		efi)
			if [ "$INSTMED" = "emmc" ]; then
				parted -s "$INTDEV" mklabel gpt
				parted -s "$INTDEV" mkpart ESP fat32 '1M' '65M'
				parted -s "$INTDEV" mkpart Root '66M' '100%'
				parted -s "$INTDEV" set 1 esp on
				mkfs.fat -F 32 "${INTDEV}p1"
			fi

			# note that this only does dual-boot with windows
			BOOTPART_NUM="$(parted -s -m $INTDEV print | grep esp | head -n1 | cut -d':' -f1)"
			BOOTPART="${INTDEV}p${BOOTPART_NUM}"
			# FIXME FIXME FIXME: detect properly, check what's mounted on / and the same drive's esp partition is it
			BOOTPART_EXT="/dev/sda1"

			BIOS_VERSION="$(cat /sys/class/dmi/id/bios_version)"
			if [ "$BIOS_VERSION" = "2023.10-libreboot-20240612" ]; then
				echo "Found BIOS version with broken EFI variables, working around..."
				CADMIUM_AS_DEFAULT=true
			elif [ -z "$(efibootmgr | grep Cadmium)" ]; then
				efibootmgr -c -d "$INTDEV" -p "$BOOTPART_NUM" -L "Cadmium" -l '\efi\systemd\systemd-bootaa64.efi'
			fi

			mkdir -p /mnt2
			mount $BOOTPART_EXT /mnt2 -o ro
			mount $BOOTPART /mnt
			mkdir -p /mnt/efi
			cp -r /mnt2/loader /mnt/loader
			cp -r /mnt2/dtbs /mnt/dtbs
			cp /mnt2/Image /mnt/Image
			cp -r /mnt2/efi/systemd /mnt/efi/systemd
			if [ "$CADMIUM_AS_DEFAULT" = "true" ]; then
				mkdir -p /mnt/efi/boot
				cp /mnt2/efi/boot/bootaa64.efi /mnt/efi/boot/bootaa64.efi
			else
				cp /mnt2/efi/boot/bootaa64.efi /mnt/efi/systemd/systemd-bootaa64.efi
			fi

			ROOTPART="/dev/disk/by-partlabel/Root"

			# now let's make root partition if it's not there
			if [ ! -e "$ROOTPART" ]; then
				# list everything, including free partitions | sort using general numbers, use : as key separator and consider only 4th key(size) | take last(biggest) value
				BIGFREE="$(parted -s -m $INTDEV unit s print free | grep free | sort --sort=g -t':' -k4,4 | tail -n1)"
				ROOTSTART="$(echo $BIGFREE | cut -d: -f2)"
				ROOTEND="$(echo $BIGFREE | cut -d: -f3)"
				parted -s -m $INTDEV unit s mkpart Root "$ROOTSTART" "$ROOTEND"
			fi

			export $(blkid --output export $ROOTPART | grep -E '^PARTUUID=.*')
			sed -i'' "s/PARTUUID=........-....-....-....-............/PARTUUID=$PARTUUID/" /mnt/loader/entries/cadmium.conf
			unset PARTUUID

			umount /mnt2
			umount /mnt
			;;
		*)
			echo "Reached unreachable point"
			exit 1
			;;
	esac

	# force rescan partitions
	sleep 1
	partx -a $INTDEV >/dev/null 2>&1 || true
	sleep 1

	case "$FILESYSTEM" in
		f2fs)
			mkfs.f2fs -f $ROOTPART -t 0 -O extra_attr,inode_checksum,sb_checksum
		;;
		ext4)
			mkfs.ext4 -F $ROOTPART
			tune2fs -o discard "$ROOTPART"
		;;
	esac

	mount $ROOTPART /mnt
	export DESTDIR=/mnt

	if [ "$ROOTFS" = "arch" ]; then
		export chroot="arch-chroot";
	fi
	$CADMIUMROOT/fs/$ROOTFS/build $DESTDIR

	cp -r /CdFiles $DESTDIR/CdFiles

	mkdir -p $DESTDIR/lib/firmware
	cp -r /lib/firmware/* $DESTDIR/lib/firmware/
	mkdir -p $DESTDIR/lib/modules
	cp -r /lib/modules/$(uname -r) $DESTDIR/lib/modules/$(uname -r)
fi

if [ -f "$CADMIUMROOT/board/$BOARD/local-overrides.quirks" ]; then
	mkdir -p $DESTDIR/etc/libinput
	cp "$CADMIUMROOT/board/$BOARD/local-overrides.quirks" $DESTDIR/etc/libinput/local-overrides.quirks
fi

if [ -f "$CADMIUMROOT/board/$BOARD/accel-matrix.hwdb" ]; then
	mkdir -p $DESTDIR/etc/udev/hwdb.d
	cp $CADMIUMROOT/board/$BOARD/accel-matrix.hwdb $DESTDIR/etc/udev/hwdb.d
	$chroot $DESTDIR udevadm hwdb -u
fi

$chroot $DESTDIR $FS_INST_PKG $BOOTFW_PKGS

if [ "$FS_HAS_OOBE" = "false" ]; then
	echo "Enter root password:"
	until $chroot $DESTDIR passwd root; do
		echo "Enter root password:"
	done

	read -p "Enter username, no spaces or big letters: "
	$chroot $DESTDIR useradd -G "$FS_USERGROUPS" -s /bin/bash -m $REPLY

	echo "Enter user password:"
	until $chroot $DESTDIR passwd $REPLY; do
		echo "Enter user password:"
	done

	export USERNAME=$REPLY

	if [ -n "$FS_SUPPORTED_UIS" ]; then
		UI_CHOICE="invalid"
		until [ "$UI_CHOICE" != "invalid" ]; do
			echo "Choose UI that you want:"
			echo -n "One of: $FS_SUPPORTED_UIS or none"
			read -p '? ' UI_CHOICE
			# make sure user doesnt try installing unsupported ui
			if ! echo "$FS_SUPPORTED_UIS none" | grep -q "$UI_CHOICE"; then
				UI_CHOICE=invalid
			fi
		done

		$chroot $DESTDIR $FS_INST_PKG $FS_PKGS_CD_BASE

		if [ "$UI_CHOICE" != "none" ]; then
			$chroot $DESTDIR $FS_INST_PKG $FS_PKGS_CD_UI_BASE
			case $UI_CHOICE in
				phosh)
					$chroot $DESTDIR $FS_INST_PKG $FS_PKGS_CD_UI_PHOSH

					case "$FS_INIT" in
					    systemd)
							$chroot $DESTDIR systemctl enable phosh
						;;
						openrc)
						    case "$FS" in
								alpine)
								    $chroot $DESTDIR rc-update add tinydm default
									$chroot $DESTDIR rc-update add waked default
									$chroot $DESTDIR tinydm-set-session -s /usr/share/wayland-sessions/phosh.desktop
								;;
							esac
						;;
					esac

					echo "Input a digit-only user password:"
					$chroot $DESTDIR passwd $USERNAME
					;;
				sway)
					# TODO: config
					$chroot $DESTDIR $FS_INST_PKG $FS_PKGS_CD_UI_SWAY

					MODKEY="invalid"
					until [ "$MODKEY" != "invalid" ]; do
						echo "Options for sway Mod key:"
						echo "1: Search/Super key(default)"
						echo "2: Left Alt key"
						read -p '? ' MODKEY
						if ! echo "1 2" | grep -q "$MODKEY"; then
							MODKEY=invalid
						fi
					done
					case $MODKEY in
						1) MODKEY=Mod4 ;;
						2) MODKEY=Mod1 ;;
					esac
					# add sway config shim to cover up hardware differences between cadmium devices and whatever sway thinks is default
					DSI_PATH="$(realpath /sys/class/drm/card*-DSI*)"
					EDP_PATH="$(realpath /sys/class/drm/card*-eDP*)"
					if [ -e "$DSI_PATH" ]; then
						DISP="$DSI_PATH"
					elif [ -e "$EDP_PATH" ]; then
						DISP="$EDP_PATH"
					else
						echo "Failed finding the internal display"
						echo "/sys/class/drm/:"
						ls /sys/class/drm
						exit 1
					fi
					DISP="$(basename $DISP | sed 's/card.-//')"

					echo "input type:touch map_to_output $DISP" > $DESTDIR/etc/sway/cadmium-shim.conf
					echo "input type:touchpad click_method clickfinger" >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "input type:touchpad tap enabled" >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "input type:touchpad tap_button_map lrm" >> $DESTDIR/etc/sway/cadmium-shim.conf

					# and also keybinds
					echo 'bindsym '$MODKEY'+F4 exec sh -c grim -g "$(slurp)" - | wl-copy' >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "bindsym $MODKEY+F6 exec brightnessctl s 5%-" >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "bindsym $MODKEY+F7 exec brightnessctl s 5%+" >> $DESTDIR/etc/sway/cadmium-shim.conf

					echo "bindsym $MODKEY+F8 exec pactl set-sink-mute @DEFAULT_SINK@ toggle" >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "bindsym $MODKEY+F9 exec pactl set-sink-volume @DEFAULT_SINK@ -5%" >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "bindsym $MODKEY+F10 exec pactl set-sink-volume @DEFAULT_SINK@ +5%" >> $DESTDIR/etc/sway/cadmium-shim.conf

					# enable cadmium shim
					(echo "include /etc/sway/cadmium-shim.conf" && cat $DESTDIR/etc/sway/config) > /tmp/sway-newconf.conf
					mv /tmp/sway-newconf.conf $DESTDIR/etc/sway/config

					# now you may ask me, "how does this work?" and the answer is: chuj wie
					sed -i'' 's/^\s*status_command.*$/status_command/g' $DESTDIR/etc/sway/config
					sed -i'' 's/^status_command/status_command while echo B: $(cat PLACEHOLDER_BAT\/capacity)\\%, $(date --date="@$(cat PLACEHOLDER_BAT\/time_to_empty_avg)" +"%H:%m") \\| T: $(date +"%d-%m-%Y  %k:%M:%S\"); do sleep 1; done/g' $DESTDIR/etc/sway/config
					sed -i'' "s#PLACEHOLDER_BAT#$BAT#g" $DESTDIR/etc/sway/config

					sed -i'' "s/Mod4/$MODKEY/g" $DESTDIR/etc/sway/config

					echo 'tty | grep tty1 && exec sway' >> $DESTDIR/home/$USERNAME/.bashrc
					;;
				gnome)
				    case "$FS" in
						alpine)
						    $chroot $DESTDIR $FS_SETUP_DE $FS_PKGS_CD_UI_GNOME
						;;
						*)
						    $chroot $DESTDIR $FS_INST_PKG $FS_PKGS_CD_UI_GNOME
						;;
					esac
					;;
				kde)
                    case "$FS" in
				        alpine)
	               	        $chroot $DESTDIR $FS_SETUP_DE $FS_PKGS_CD_UI_KDE
				        ;;
				        *)
	               	        $chroot $DESTDIR $FS_INST_PKG $FS_PKGS_CD_UI_KDE
				        ;;
				    esac
					;;
				lomiri)
					$chroot $DESTDIR $FS_INST_PKG $FS_PKGS_CD_UI_LOMIRI
					;;
			esac
			cp -r $CADMIUMROOT/fs/ucm/* $DESTDIR/usr/share/alsa/ucm2/conf.d/
		fi
	else
		echo "Looks like, $FS_FANCYNAME does not support user environments"
		echo "Skipping..."
	fi
fi

if [ -e "$CADMIUMROOT/baseboard/$BASEBOARD/postinstall" ]; then
	"$CADMIUMROOT/baseboard/$BASEBOARD/postinstall"
fi

if [ $INSTMED != this ]; then
	umount /mnt
fi
echo "Done!"
